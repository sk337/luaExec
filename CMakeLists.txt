cmake_minimum_required(VERSION 3.10)

project(lueExec C CXX)

# Specify the path to the Makefile
set(LIBRARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/external/lua")

# Add a custom target to build the Lua library
add_custom_target(build_library ALL
        COMMAND make -C ${LIBRARY_DIR}
        COMMENT "Building external Lua library"
        BYPRODUCTS ${LIBRARY_DIR}/src/liblua.a
)

# Optionally, add the library directory to the include path
include_directories(${LIBRARY_DIR}/src)

# Link the compiled library
add_library(lua STATIC IMPORTED)
set_target_properties(lua PROPERTIES
        IMPORTED_LOCATION ${LIBRARY_DIR}/src/liblua.a # Adjust as necessary
)

# Define the path for the generated bytecode file
set(BYTECODE_OUTPUT ${CMAKE_BINARY_DIR}/bytecode.luac)
set(HEADER_OUTPUT ${CMAKE_SOURCE_DIR}/src/bytecode.h)

# Add a custom command to run Lua compilation and xxd
add_custom_command(
    OUTPUT ${HEADER_OUTPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Compiling source.lua to bytecode.luac"
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}
    COMMAND ./external/lua/src/luac -s -o ${BYTECODE_OUTPUT} source.lua
    COMMAND xxd -i -n bytecode ${BYTECODE_OUTPUT} > ${HEADER_OUTPUT}
    DEPENDS source.lua
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "Generating src/bytecode.h from source.lua"
)

# Add a custom target to tie the generated header to the build process
add_custom_target(generate_bytecode DEPENDS ${HEADER_OUTPUT})

# Define your main target (e.g., an executable or library target)
add_executable(your_target src/main.cpp src/bytecode.h
        src/crypt/hwid.cpp
        src/crypt/hwid.h
        src/crypt/base64.cpp
        src/crypt/base64.h
        src/crypt/rand.cpp
        src/crypt/rand.h
)  # Replace src/main.cpp with your actual source file(s)

# Ensure your_target depends on the Lua library and generated bytecode
add_dependencies(your_target build_library generate_bytecode)

# Link your target with the lua library
target_link_libraries(your_target lua)
